# If you're running native Linux and your uid:gid isn't 1000:1000 you can set
# these to match your values before you build your image. You can check what
# your uid:gid is by running `id` from your terminal.
#export UID=1000
#export GID=1000

# In development avoid writing out bytecode to __pycache__ directories.
#PYTHONDONTWRITEBYTECODE=
export PYTHONDONTWRITEBYTECODE=false

# You should generate a random string of 50+ characters for this value in prod.
# You can generate a secure secret by running: ./run secret
export SECRET_KEY=insecure_key_for_dev

# This should never be set to true in production but it should be enabled in dev.
#export DEBUG=false
export DEBUG=true

# Which Node environment is running? This should be "development" or "production".
# export FLASK_ENV=production
export FLASK_ENV=development

# A comma separated list of allowed hosts. In production this should be your
# domain name, such as "example.com,www.example.com" or ".example.com" to
# support both example.com and all sub-domains for your domain.
#
# This is being overwritten in development to support multiple Docker dev
# environments where you might be connecting over a local network IP address
# instead of localhost. You should not use "*" in production.
#export ALLOWED_HOSTS=".localhost,127.0.0.1,[::1]"
export ALLOWED_HOSTS="*"

# The bind port for gunicorn.
#
# Be warned that if you change this value you'll need to change 8000 in both
# your Dockerfile and in a few spots in docker-compose.yml due to the nature of
# how this value can be set (Docker Compose doesn't support nested ENV vars).
#export PORT=8000

# How many workers and threads should your app use? WEB_CONCURRENCY defaults
# to the server's CPU count * 2. That is a good starting point. In development
# it's a good idea to use 1 to avoid race conditions when debugging.
#export WEB_CONCURRENCY=
export WEB_CONCURRENCY=1
#export PYTHON_MAX_THREADS=1

# Do you want code reloading to work with the gunicorn app server?
#export WEB_RELOAD=false
export WEB_RELOAD=true

export FLASK_APP=wsgi.py
export FLASK_RUN_PORT=5000
export FLASK_DEBUG=True
export SQLALCHEMY_DATABASE_URI="postgresql://postgres:postgres@localhost:5432/your_db_name"
export APP_FOLDER=src


# TODO rename KEYCLOAK_CLIENT_SECRET 
export CLIENT_SECRET="use_your_own_client_secret"
export KEYKCLOAK_URL="localhost:8080"
export REALM_NAME="myrealm"
export CLIENT_ID="your_client_id"

export APISIX_API_KEY=use_your_own_api_six_key

export APISIX_ADMIN_URL=https://localhost

export FERNET_KEY=$(python3 -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode('utf-8'))")

export DEFAULT_CREDIT_AMOUNT=10000.0

export PAYMENT_URL='http://localhost:8000/payment'
export PAYMENT_STATUS_URL='http://localhost:8000/payment/status'
export BACKEND_ADMIN_URL='http://localhost:8000/admin'
export SEND_RECEIPT_MAIL_URL='http://localhost:8000/send-receipt'
export CSRF_TRUSTED_ORIGINS="http://localhost"

export NOTIFICATION_EMAIL="test@example.com"
export CACHE_TYPE="redis"
export CACHE_REDIS_HOST="localhost"
export CACHE_REDIS_PORT="6379"
export CACHE_REDIS_DB=0
export CACHE_REDIS_URL=redis://default:
export SCHEDULER_ENABLED=False
export CAPTCHA_SECRET_KEY="dummy-captcha-secret"



